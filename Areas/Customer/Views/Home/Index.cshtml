@model List<ApplicationUser>

@using Microsoft.AspNetCore.Identity
@using SignalRChatApp.Data
@using System.Security.Claims
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext _db

@{
    ViewData["Title"] = "Home Page";
}
<!--Main Container
    Left Pane holds the Friends
    Right Pane(bigger width holds the selected Friends.)
    -->
<div>
    <div style="display:inline-flex; height: 85vh;overflow:auto">
        <!--User Pane-->
        <div id="friends-pane">
            <!--Friends List-->
            <div id="friends-list">
                <!--
            @{
                var userImg = @"/Images/" + User.Identity.Name + ".jpg";
            }
            <img src=@userImg class="rounded-circle" width="30%" height="35%"/>
                -->
                <input id="userSearch" type="text" placeholder="Search a User"><span><i class="fas fa-search icon"></i></span>
                <ul id="user-search-list" class="list-group">
                </ul>
                <h3>Friends</h3>

                <div>
                    <ul class="list-group">
                        @foreach (var item in Model)
                        {
                        <li onclick="openChat('@item.ChatName','@item.Email')" class="rounded-pill friend-card list-group-item-light">
                            <img class="rounded-circle" src="@item.ProfileImage" />
                            @{
                                string statusClass = string.Empty;

                                if (item.IsOnline)
                                {
                                    statusClass = "status-circle status-online";
                                }
                                else
                                {
                                    statusClass = "status-circle";
                                }
                            }
                            <span id="@item.Email.Replace("@","_")" class="@statusClass">
                            </span>
                            @item.ChatName

                            @{
                                var pendingMsgId = string.Empty;
                                pendingMsgId = item.Email.Replace("@", "_") + "-pm";
                            }

                            @*
        Logic to get Pending Messages at Runtime..
                            *@

                            @{

                                string myId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                                string frId = item.Id;
                                int pendingMsgCount = _db.Messages
                                    .Where(
                                        u => u.SenderId == frId && u.ReceiverId == myId && u.IsPending == true
                                    )
                                    .ToList()
                                    .Count;

                            }
                            @if (pendingMsgCount > 0)
                            {
                                <span style="padding:0.33rem" id="@pendingMsgId" class="floating-pending-msg rounded-circle">@pendingMsgCount</span>
                            }
                            else
                            {
                                <span id="@pendingMsgId" class="floating-pending-msg rounded-circle"></span>
                            }
                        </li>
                        }
                    </ul>
                </div>

            </div>
        </div>

        <!--Chat Pane-->
        <div id="chat-pane">

        </div>
    </div>
</div>

<audio autoplay="autoplay" id="notifySound" hidden>
    <source src="/sms_notification.mp3" type="audio/mp3" />
</audio>

<div class="modal">
    <h1>Loading Messages..</h1>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/index.js" defer></script>
}
